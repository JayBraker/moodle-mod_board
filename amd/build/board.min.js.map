{"version":3,"file":"board.min.js","sources":["../src/board.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * A javascript module to handle the board.\n *\n * @author     Karen Holland <karen@brickfieldlabs.ie>\n * @copyrigt   2021 Brickfield Education Labs <https://www.brickfield.ie/>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport $ from \"jquery\";\nimport \"jqueryui\";\nimport {get_strings as getStrings, get_string as getString} from \"core/str\";\nimport Ajax from \"core/ajax\";\nimport ModalFactory from \"core/modal_factory\";\nimport ModalEvents from \"core/modal_events\";\nimport Notification from \"core/notification\";\nimport \"mod_board/jquery.editable.amd\";\nimport Fragment from \"core/fragment\";\n\n/**\n * Execute a ajax call to a mod_board ajax service.\n *\n * @param {string} method\n * @param {array} args\n * @param {method} callback\n * @param {method} failcallback\n * @private\n */\nconst _serviceCall = function(method, args, callback, failcallback) {\n    Ajax.call([{\n        methodname: 'mod_board_' + method,\n        args: args,\n        done: function(data) {\n            callback(data);\n        },\n        fail: function(error) {\n            Notification.exception(error);\n            if (failcallback) {\n                failcallback(error);\n            }\n        }\n    }]);\n};\n\n/**\n * Indicates if this is a keycode we want to listend to for\n * aria purposes.\n *\n * @returns {boolean}\n * @param {number} key\n */\nconst isAriaTriggerKey = function(key) {\n    return key == 13 || key == 32;\n};\n\n/**\n * Encodes text into html entities.\n *\n * @param {string} rawText\n * @returns {*|jQuery}\n */\nconst encodeText = function(rawText) {\n    return $('<div />').text(rawText).html();\n};\n\n/**\n * Decodes text from html entities.\n *\n * @param {string} encodedText\n * @returns {*|jQuery}\n */\nconst decodeText = function(encodedText) {\n    return $('<div />').html(encodedText).text();\n};\n\n/**\n * Handler for keypress and click actions.\n *\n * @param {object} elem\n * @param {function} callback\n * @returns {*}\n */\nconst handleAction = function(elem, callback) {\n    return elem.on('click keypress', function(e) {\n        if (e.type == 'keypress') {\n            if (isAriaTriggerKey(e.keyCode)) {\n                e.preventDefault();\n            } else {\n                return;\n            }\n        }\n\n        callback();\n    });\n};\n\n/**\n * Setting up element edibility.\n *\n * @param {object} elem\n * @param {function} callback\n * @param {function} callBeforeOnKeyEditing\n * @returns {*}\n */\nconst handleEditableAction = function(elem, callback, callBeforeOnKeyEditing) {\n    if (elem.is(':editable')) {\n        throw new Error('handleEditableAction - must be called before setting the element as editable');\n    }\n\n    // Can't use on(edit) here because we want to do actions (save cache) before the control goes into edit mode\n    return elem.on('dblclick keypress', function(e) {\n        if (e.type == 'keypress') {\n            if (isAriaTriggerKey(e.keyCode) && !elem.is(':editing')) {\n                e.preventDefault();\n                if (callBeforeOnKeyEditing) {\n                    callback();\n                }\n                elem.editable('open');\n                if (callBeforeOnKeyEditing) {\n                    return;\n                }\n            } else {\n                return;\n            }\n        }\n\n        callback();\n    });\n};\n\n/**\n * The default function of the module, which does the setup of the page.\n *\n * @param {object} board\n * @param {object} options\n * @param {number} contextid\n */\nexport default function(board, options, contextid) {\n    // An array of strings to load as a batch later.\n    // Not necessary, but used to load all the strings in one ajax call.\n    var strings = {\n        default_column_heading: '',\n        post_button_text: '',\n        cancel_button_text: '',\n        remove_note_title: '',\n        remove_note_text: '',\n        remove_column_title: '',\n        note_changed_title: '',\n        note_changed_text: '',\n        note_deleted_text: '',\n        rate_note_text: '',\n        Ok: '',\n        delete: '',\n        Cancel: '',\n        warning: '',\n        modal_title_new: '',\n        modal_title_edit: '',\n        option_youtube: '',\n        option_image: '',\n        option_link: '',\n\n        aria_newcolumn: '',\n        aria_newpost: '',\n        aria_deletecolumn: '',\n        aria_deletepost: '',\n        aria_addmedia: '',\n        aria_addmedianew: '',\n        aria_deleteattachment: '',\n        aria_postedit: '',\n        aria_canceledit: '',\n        aria_postnew: '',\n        aria_cancelnew: '',\n        aria_ratepost: '',\n\n        invalid_file_extension: '',\n        invalid_file_size_min: '',\n        invalid_file_size_max: '',\n\n        invalid_youtube_url: '',\n    };\n\n    const MEDIA_SELECTION_BUTTONS = 1,\n          ATTACHMENT_VIDEO = 1,\n          ATTACHMENT_IMAGE = 2,\n          ATTACHMENT_LINK = 3,\n          SORTBY_DATE = 1,\n          SORTBY_RATING = 2,\n          SORTBY_NONE = 3;\n    var reloadTimer = null,\n        lastHistoryId = null,\n        isEditor = options.isEditor || false,\n        usersCanEdit = options.usersCanEdit,\n        userId = options.userId || -1,\n        mediaSelection = options.mediaselection || MEDIA_SELECTION_BUTTONS,\n        editingNote = 0,\n        isReadOnlyBoard = options.readonly || false,\n        ratingenabled = options.ratingenabled,\n        sortby = options.sortby || SORTBY_DATE,\n        editModal = null,\n        enableblanktarget = (parseInt(options.enableblanktarget) === 1);\n\n    /**\n     * Helper method to make calls to mod_board external services.\n     *\n     * @param {string} method\n     * @param {array} args\n     * @param {function} callback\n     * @param {function} failcallback\n     */\n    var serviceCall = function(method, args, callback, failcallback) {\n        if (method !== 'board_history') {\n            stopUpdating();\n        }\n        _serviceCall(method, args, function() {\n            callback.apply(null, arguments);\n            if (method !== 'board_history' && method != 'get_board') {\n                updateBoard(true);\n            }\n        }, failcallback);\n    };\n\n    /**\n     * Returns the jquery element of a given note identifier.\n     *\n     * @param {number} ident\n     * @returns {jQuery<HTMLElement>}\n     */\n    var getNote = function(ident) {\n        return $(\".board_note[data-ident='\" + ident + \"']\");\n    };\n\n    /**\n     * Returns the jquery element of the note text for the given note element.\n     *\n     * @method getNoteTextForNote\n     * @param {object} note\n     * @returns {*|jQuery}\n     */\n    var getNoteTextForNote = function(note) {\n        return $(note).find(\".mod_board_note_text\");\n    };\n\n    /**\n     * Returns the jquery element of the note heading for the given note element.\n     *\n     * @method getNoteHeadingForNote\n     * @param {object} note\n     * @returns {*|jQuery}\n     */\n    var getNoteHeadingForNote = function(note) {\n        return $(note).find(\".mod_board_note_heading\");\n    };\n\n    /**\n     * Returns the jquery element of the note border for the given note element.\n     *\n     * @method getNoteBorderForNote\n     * @param {object} note\n     * @returns {*|jQuery}\n     */\n    var getNoteBorderForNote = function(note) {\n        return $(note).find(\".mod_board_note_border\");\n    };\n\n    /**\n     * Gets a jquery node for the attachments of a given note.\n     *\n     * @method getNoteAttachmentsForNote\n     * @param {object} note\n     * @returns {*|jQuery}\n     */\n    var getNoteAttachmentsForNote = function(note) {\n        return $(note).find(\".mod_board_note_attachment\");\n    };\n\n    /**\n     * Creates text identifier for a given node.\n     *\n     * @method textIdentifierForNote\n     * @param {object} note\n     * @returns {null|*|jQuery}\n     */\n    var textIdentifierForNote = function(note) {\n        var noteText = getNoteTextForNote(note).html(),\n            noteHeading = getNoteHeadingForNote(note).html(),\n            noteAttachment = attachmentDataForNote(note);\n\n        if (noteHeading.length > 0) {\n            return noteHeading;\n        }\n        if (noteText.length > 0) {\n            return noteText.replace(/<br\\s*\\/?>/gi, \" \").replace(/\\n/g, \" \").split(/\\s+/).slice(0, 5).join(\" \");\n        }\n        if (noteAttachment.info && noteAttachment.info.length > 0) {\n            return noteAttachment.info;\n        }\n        return null;\n    };\n\n    /**\n     * Update the Aria info for a given note id.\n     *\n     * @method updateNoteAria\n     * @param {number} noteId\n     */\n    var updateNoteAria = function(noteId) {\n        var note = getNote(noteId),\n            columnIdentifier = note.closest('.board_column').find('.mod_board_column_name').text();\n\n        if (noteId) { // New post\n            var noteIdentifier = textIdentifierForNote(note),\n                deleteNoteString = strings.aria_deletepost.replace('{column}', columnIdentifier).replace('{post}', noteIdentifier);\n\n            note.find('.delete_note').attr('aria-label', deleteNoteString).attr('title', deleteNoteString);\n            note.find('.mod_board_rating').attr('aria-label', strings.aria_ratepost.replace('{column}',\n                columnIdentifier).replace('{post}', noteIdentifier));\n            note.find('.note_ariatext').html(noteIdentifier);\n        }\n\n    };\n\n    /**\n     * Update the Aria information for a given column id.\n     *\n     * @method updateColumnAria\n     * @param {number} columnId\n     */\n    var updateColumnAria = function(columnId) {\n        var column = $('.board_column[data-ident=' + columnId + ']'),\n            columnIdentifier = column.find('.mod_board_column_name').text(),\n            newNoteString = strings.aria_newpost.replace('{column}', columnIdentifier),\n            deleteColumnString = strings.aria_deletecolumn.replace('{column}', columnIdentifier);\n        column.find('.newnote').attr('aria-label', newNoteString).attr('title', newNoteString);\n        column.find('.delete_column').attr('aria-label', deleteColumnString).attr('title', deleteColumnString);\n\n        column.find(\".board_note\").each(function(index, note) {\n            updateNoteAria($(note).data('ident'));\n        });\n    };\n\n    /**\n     * Stop the current note editing process.\n     *\n     * @method stopNoteEdit\n     */\n    var stopNoteEdit = function() {\n        if (!editingNote) {\n            getNote(0).remove();\n            return;\n        }\n\n        var note = getNote(editingNote);\n\n        if (note) {\n            var noteHeading = getNoteHeadingForNote(note);\n            var noteText = getNoteTextForNote(note);\n            var noteBorder = getNoteBorderForNote(note);\n\n            // Reset the visibility state.\n            noteHeading.show();\n            noteBorder.show();\n            noteText.show();\n            if (!noteHeading.html()) {\n                noteHeading.hide();\n                noteBorder.hide();\n            }\n            if (!noteText.html() && noteHeading.html()) {\n                noteText.hide();\n                noteBorder.hide();\n            }\n        }\n\n        editingNote = 0;\n    };\n\n    /**\n     * Start the editing of a particular note, by identifier.\n     *\n     * @method startNoteEdit\n     * @param {number} ident\n     */\n    var startNoteEdit = function(ident) {\n\n        if (editingNote) {\n            if (editingNote == ident) {\n                return;\n            }\n            stopNoteEdit();\n        }\n\n        if (ident) {\n            var pendingNote = getNote(0);\n            if (pendingNote) {\n                pendingNote.remove();\n            }\n        }\n\n        var note = getNote(ident);\n        if (note) {\n            showModalForm(note);\n\n            if (ident) {\n                editingNote = ident;\n            }\n        }\n    };\n\n    /**\n     * Delete a given note, by identifier.\n     *\n     * @method deleteNote\n     * @param {number} ident\n     */\n    var deleteNote = function(ident) {\n        Notification.confirm(\n            strings.remove_note_title, // Are you sure?\n            strings.remove_note_text, // This will effect others.\n            strings.delete,\n            strings.Cancel,\n            function() {\n                serviceCall('delete_note', { id: ident }, function (result) {\n                    if (result.status) {\n                        lastHistoryId = result.historyid;\n                        let note = getNote(ident);\n                        if (sortby == SORTBY_NONE) {\n                            let columnID = note.data('column');\n                            let sortorder = note.data('sortorder');\n                            sortAfterDelete(columnID, sortorder);\n                        }\n                        note.remove();\n                    }\n                });\n            }\n        );\n    };\n\n    /**\n     * This function gets a board column as a jQuery element.\n     * @param {number} columnID The column ID.\n     * @returns {jQuery<HTMLElement>}\n     */\n    const getColumn = (columnID) => {\n        return $(`.board_column[data-ident='${columnID}'] .board_column_content`);\n    };\n\n    const sortAfterDelete = (columnID, sortorder) => {\n        let column = getColumn(columnID);\n        let elements = column.children().filter((_, element) => {\n            return parseInt($(element).data('sortorder')) > parseInt(sortorder);\n        });\n        elements.each((_, element) => {\n            let so = $(element).data('sortorder');\n            $(element).data('sortorder', so - 1);\n        });\n    };\n\n    /**\n     * Rate (star) a give note, by identifier.\n     *\n     * @method rateNote\n     * @param {number} ident\n     */\n    var rateNote = function(ident) {\n        if (!ratingenabled) {\n            return;\n        }\n        if (isReadOnlyBoard) {\n            return;\n        }\n\n        var note = getNote(ident),\n            rating = note.find('.mod_board_rating');\n        if (rating.data('disabled')) {\n            return;\n        }\n        rating.data('disabled', true);\n\n        serviceCall('can_rate_note', {id: ident}, function(canrate) {\n            if (canrate) {\n                Notification.confirm(\n                    strings.rate_note_text, // Are you sure?\n                    null,\n                    strings.Ok,\n                    strings.Cancel,\n                    function() {\n                        serviceCall('rate_note', {id: ident}, function(result) {\n                            if (result.status) {\n                                lastHistoryId = result.historyid;\n                                rating.html(result.rating);\n                                if (sortby == SORTBY_RATING) {\n                                    sortNotes(note.closest('.board_column_content'));\n                                }\n                            }\n                            rating.data('disabled', false);\n                        });\n                    }\n                ).then(function(rateModal) {\n                    // Do this here, because it catches both cancel clicks, or someone clicking the X.\n                    rateModal.getRoot().on(ModalEvents.hidden, function() {\n                        rating.data('disabled', false);\n                    });\n                });\n            }\n        });\n    };\n\n    /**\n     * Update the attachment information of a note.\n     *\n     * @method attachmentTypeChanged\n     * @param {object} note\n     */\n    var attachmentTypeChanged = function(note) {\n        var noteAttachment = getNoteAttachmentsForNote(note),\n            type = noteAttachment.find('.mod_board_type').val(),\n            attachmentInfo = noteAttachment.find('.info'),\n            attachmentUrl = noteAttachment.find('.url'),\n            attachmentFile = noteAttachment.find('.mod_board_file');\n\n        if (type > \"0\") {\n            attachmentInfo.prop('placeholder', strings['option_' + attachmentTypeToString(type) + '_info']);\n            attachmentUrl.prop('placeholder', strings['option_' + attachmentTypeToString(type) + '_url']);\n\n            attachmentInfo.show();\n            if (type == ATTACHMENT_IMAGE && FileReader) {\n                attachmentFile.show();\n                attachmentUrl.hide();\n            } else {\n                attachmentFile.hide();\n                attachmentUrl.show();\n            }\n        } else {\n            attachmentInfo.hide();\n            attachmentUrl.hide();\n            attachmentFile.hide();\n\n            attachmentInfo.val('');\n            attachmentUrl.val('');\n\n        }\n    };\n\n    /**\n     * Set the attachment of a note.\n     *\n     * @method setAttachment\n     * @param {object} note\n     * @param {object} attachment\n     */\n    var setAttachment = function(note, attachment) {\n        var noteAttachment = getNoteAttachmentsForNote(note);\n        if (noteAttachment) {\n            if (!attachment) {\n                attachment = {type: \"0\"};\n            } else {\n                attachment.type += \"\";// Just in case\n            }\n            var attType = noteAttachment.find('.mod_board_type');\n            attType.val(attachment.type ? attachment.type : \"0\");\n            if (attType.val() > \"0\") {\n                noteAttachment.find('.info').val(decodeText(attachment.info));\n                noteAttachment.find('.url').val(decodeText(attachment.url));\n            }\n            attachmentTypeChanged(note, attachment);\n        }\n        previewAttachment(note, attachment);\n    };\n\n    /**\n     * Returns an object with various information about a note's attachment.\n     *\n     * @method attachmentDataForNote\n     * @param {object} note\n     * @returns {{filename: null, filecontents: null, type: number, url: null, info: null}}\n     */\n    var attachmentDataForNote = function(note) {\n        var attachment = {type: 0, info: null, url: null, filename: null, filecontents: null},\n            noteAttachment = getNoteAttachmentsForNote(note);\n        if (noteAttachment.length) {\n            attachment.type = noteAttachment.find('.mod_board_type').val();\n            attachment.info = encodeText(noteAttachment.find('.info').val());\n            attachment.url = encodeText(noteAttachment.find('.url').val());\n            var fileElem = noteAttachment.find('.mod_board_file>input');\n            if (fileElem.data('filename')) {\n                attachment.filename = fileElem.data('filename');\n                attachment.filecontents = fileElem.data('filecontents');\n            }\n        }\n        if ((!attachment.info || !attachment.info.length) && (!attachment.url || !attachment.url.length) &&\n            (!attachment.filename)) {\n            attachment.type = 0;\n        }\n\n        return attachment;\n    };\n\n    /**\n     * Get the string type of a attachment type number.\n     *\n     * @method attachmentTypeToString\n     * @param {number} type\n     * @returns {string|null}\n     */\n    var attachmentTypeToString = function(type) {\n        switch (type) {\n            case \"1\": return 'youtube';\n            case \"2\": return 'image';\n            case \"3\": return 'link';\n            default: return null;\n        }\n    };\n\n    /**\n     * This parses a youtube video ID from a URL. We can use this ID to\n     * construct the embed URL.\n     * @param {string} url The URL entered to the modal.\n     * @returns {string | null} The youtube embed URL or null.\n     */\n    const getEmbedUrl = (url) => {\n        // Thanks for the regex from: https://gist.github.com/rodrigoborgesdeoliveira/987683cfbfcc8d800192da1e73adc486.\n        let regex = /(\\/|%3D|v=)([0-9A-z-_]{11})([%#?&]|$)/;\n        let videoID = url.match(regex);\n        if (!videoID || videoID[2] === undefined || videoID[2].length !== 11) {\n            return null;\n        }\n        return `https://www.youtube-nocookie.com/embed/${videoID[2]}`;\n    };\n\n    /**\n     * Display the attachment preview for a note.\n     *\n     * @method previewAttachment\n     * @param {object} note\n     * @param {object} attachment\n     */\n    var previewAttachment = function(note, attachment) {\n        var elem = note.find('.mod_board_preview');\n        if (!attachment) {\n            attachment = attachmentDataForNote(note);\n        }\n\n        if (!getNoteTextForNote(note).html().length) {\n            elem.addClass('mod_board_notext');\n        } else {\n            elem.removeClass('mod_board_notext');\n        }\n\n        elem.removeClass('wrapper_youtube');\n        elem.removeClass('wrapper_image');\n        elem.removeClass('wrapper_url');\n        if (attachment.filename && parseInt(attachment.type) == ATTACHMENT_IMAGE) { // Before uploading\n            elem.html(`<img src=\"${attachment.filecontents}\" alt=\"${attachment.info}\"\n                class=\"mod_board_preview_element\"/>`);\n            elem.addClass('wrapper_image');\n            elem.show();\n        } else if (attachment.url) {\n            const blanktarget = enableblanktarget ? ' target=\"_blank\"' : '';\n            switch (parseInt(attachment.type)) {\n                case ATTACHMENT_VIDEO: { // Youtube\n                    let url = getEmbedUrl(attachment.url);\n                    if (url === null) {\n                        elem.html(strings.invalid_youtube_url);\n                    } else {\n                        elem.html('<iframe src=\"' + url +\n                            '\" class=\"mod_board_preview_element\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write;' +\n                            'encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>');\n                        elem.addClass('wrapper_youtube');\n                    }\n                    elem.show();\n                }\n                break;\n                case ATTACHMENT_IMAGE: // Image\n                    elem.html(`<img src=\"${attachment.url}\" alt=\"${attachment.info}\"\n                        class=\"mod_board_preview_element\"/>`);\n                    elem.addClass('wrapper_image');\n                    elem.show();\n                break;\n                case ATTACHMENT_LINK: // Url\n                    elem.html('<a href=\"' + attachment.url + '\" class=\"mod_board_preview_element\"' + blanktarget + '>' +\n                             (attachment.info || attachment.url) + '</a>');\n                    elem.addClass('wrapper_url');\n                    elem.show();\n                break;\n                default:\n                    elem.html('');\n                    elem.hide();\n            }\n        } else {\n            elem.html('');\n            elem.hide();\n        }\n    };\n\n    /**\n     * Add a new note with the given information.\n     *\n     * @method addNote\n     * @param {number} columnid\n     * @param {number} ident\n     * @param {string} heading\n     * @param {string} content\n     * @param {object} attachment\n     * @param {object} owner\n     * @param {number} sortorder\n     * @param {string} rating\n     */\n    var addNote = function(columnid, ident, heading, content, attachment, owner, sortorder, rating) {\n        var ismynote = owner.id == userId || !ident;\n        var iseditable = isEditor || (ismynote && !isReadOnlyBoard);\n\n        if (!ident) {\n            var pendingNote = getNote(0);\n            if (pendingNote) {\n                pendingNote.remove();\n            }\n        }\n\n        // Making space for this note if necessary in the sort order.\n        if (sortby == SORTBY_NONE) {\n            let children = $(`.board_column[data-ident='${columnid}'] .board_column_content`).children();\n            let elements = children.filter((_, element) => {\n                return parseInt($(element).data('sortorder')) >= parseInt(sortorder);\n            });\n            elements.each((_, element) => {\n                let so = $(element).data('sortorder');\n                $(element).data('sortorder', so + 1);\n            });\n        }\n\n        var note = $('<div class=\"board_note\" data-column=\"' + columnid + '\" data-ident=\"' + ident +\n            '\" data-sortorder=\"' + sortorder + '\"></div>');\n        if (ismynote) {\n            note.addClass('mod_board_mynote');\n        }\n        if (iseditable) {\n            note.addClass('mod_board_editablenote');\n        }\n        if (!ismynote && !iseditable) {\n            note.addClass('mod_board_nosort');\n        }\n\n        var notecontent = $('<div class=\"mod_board_note_content\"></div>'),\n            noteHeading = $('<div class=\"mod_board_note_heading\" tabindex=\"0\">' + (heading ? heading : '') + '</div>'),\n            noteBorder = $('<div class=\"mod_board_note_border\"></div>'),\n            noteText = $('<div class=\"mod_board_note_text\" tabindex=\"0\">' + (content ? content : '') + '</div>'),\n            noteAriaText = $('<div class=\"note_ariatext hidden\" role=\"heading\" aria-level=\"4\" tabindex=\"0\"></div>'),\n            attachmentPreview = $('<div class=\"mod_board_preview\"></div>');\n\n        notecontent.append(noteHeading);\n        notecontent.append(noteBorder);\n        notecontent.append(noteText);\n        notecontent.append(noteAriaText);\n\n        notecontent.append(attachmentPreview);\n        note.append(notecontent);\n\n        var columnContent = $('.board_column[data-ident=' + columnid + '] .board_column_content');\n\n        var beginEdit = () => {\n            startNoteEdit(ident);\n        };\n\n        if (ident) {\n            if (ratingenabled) {\n                note.addClass('mod_board_rateablenote');\n                var rateElement = $(`<div class=\"fa fa-star mod_board_rating\" role=\"button\" tabindex=\"0\"> ${rating} </div>`);\n\n                handleAction(rateElement, () => {\n                    rateNote(ident);\n                });\n                notecontent.append(rateElement);\n            }\n\n            if (iseditable) {\n                var removeElement = $('<div class=\"mod_board_remove fa fa-remove delete_note\" role=\"button\" tabindex=\"0\"></div>');\n                handleAction(removeElement, () => {\n                    deleteNote(ident);\n                });\n\n                notecontent.append(removeElement);\n\n                handleEditableAction(noteText, beginEdit);\n                handleEditableAction(noteHeading, beginEdit);\n                handleEditableAction(noteBorder, beginEdit);\n\n                setAttachment(note, attachment);\n            } else {\n                previewAttachment(note, attachment);\n            }\n\n            if (!noteHeading.html()) {\n                noteHeading.hide();\n                noteBorder.hide();\n            }\n            if (!noteText.html() && noteHeading.html()) {\n                noteText.hide();\n                noteBorder.hide();\n            }\n\n            var lastOne = columnContent.find(\".board_note\").last();\n\n            if (lastOne.length) {\n                note.insertAfter(lastOne);\n            } else {\n                columnContent.prepend(note);\n            }\n        } else {\n            $('.board_column[data-ident=' + columnid + '] .board_column_newcontent').append(note);\n            // This is effectively a note placeholder. So we don't need to show it.\n            note.hide();\n            beginEdit();\n        }\n    };\n\n    /**\n     * Add a new column.\n     *\n     * @method addColumn\n     * @param {object} ident\n     * @param {string} name\n     * @param {array} notes\n     * @param {string} colour\n     */\n    var addColumn = function (ident, name, notes, colour) {\n        let headerStyle = `style=\"border-top: 10px solid #${colour}\"`;\n        var iseditable = isEditor,\n            nameCache = null,\n            column = $(`<div class=\"board_column board_column_hasdata\" ${headerStyle} data-ident=\"${ident}\"></div>`),\n            columnHeader = $('<div class=\"board_column_header\"></div>'),\n            columnSort = $('<div class=\"mod_board_column_sort fa\"></div>'),\n            columnName = $('<div class=\"mod_board_column_name\" tabindex=\"0\" aria-level=\"3\" role=\"heading\">' + name + '</div>'),\n            columnContent = $('<div class=\"board_column_content\"></div>'),\n            columnNewContent = $('<div class=\"board_column_newcontent\"></div>');\n        // Only add the sort button if it makes sense.\n        if (sortby != SORTBY_NONE) {\n            columnHeader.append(columnSort);\n        }\n        columnHeader.append(columnName);\n\n        if (options.hideheaders) {\n            columnName.addClass('d-none');\n        }\n\n        columnSort.on('click', function() {\n            sortNotes(columnContent, true);\n        });\n\n        if (iseditable) {\n            column.addClass('mod_board_editablecolumn');\n\n            var removeElement = $('<div class=\"mod_board_remove fa fa-remove delete_column\" role=\"button\" tabindex=\"0\"></div>');\n            handleAction(removeElement, () => {\n                Notification.confirm(\n                    strings.remove_column_title, // Are you sure?\n                    getString('remove_column_text', 'mod_board', getColumnName(ident)),\n                    strings.delete,\n                    strings.Cancel,\n                    function() {\n                        serviceCall('delete_column', {id: ident}, function(result) {\n                            if (result.status) {\n                                column.remove();\n                                lastHistoryId = result.historyid;\n                            }\n                        });\n                    }\n                );\n            });\n\n            columnHeader.append(removeElement);\n        }\n\n        column.append(columnHeader);\n        column.append(columnContent);\n        column.append(columnNewContent);\n\n        if (iseditable) {\n            handleEditableAction(columnName, function() {\n                nameCache = columnName.html();\n            }, true);\n\n            columnName.editable({\n                toggleFontSize: false,\n                closeOnEnter: true,\n                callback: function(data) {\n                    if (data.content) {\n                        serviceCall('update_column', {id: ident, name: columnName.html()}, function(result) {\n                            if (!result.status) {\n                                columnName.html(nameCache);\n                                nameCache = null;\n                            } else {\n                                lastHistoryId = result.historyid;\n                                updateColumnAria(ident);\n                            }\n                        }, function() {\n                            columnName.html(nameCache);\n                            nameCache = null;\n                        });\n                    } else {\n                        columnName.html(nameCache);\n                        nameCache = null;\n                    }\n                }\n            });\n        }\n\n        if (!isReadOnlyBoard) {\n            columnNewContent.append('<div class=\"board_button newnote\" role=\"button\" tabindex=\"0\">' +\n            '<div class=\"button_content\"><span class=\"fa ' + options.noteicon + '\"></span></div></div>');\n\n            handleAction(columnNewContent.find('.newnote'), function() {\n                addNote(ident, 0, null, null, null, {id: userId}, 0, 0);\n            });\n        }\n\n        var lastOne = $(\".mod_board .board_column_hasdata\").last();\n        if (lastOne.length) {\n            column.insertAfter(lastOne);\n        } else {\n            $(\".mod_board\").append(column);\n        }\n\n        if (notes) {\n            for (var index in notes) {\n                let sortorder = sortby == 3 ? notes[index].sortorder : notes[index].timecreated;\n                addNote(ident, notes[index].id, notes[index].heading, notes[index].content,\n                    {type: notes[index].type, info: notes[index].info, url: notes[index].url},\n                    {id: notes[index].userid}, sortorder, notes[index].rating);\n            }\n        }\n        sortNotes(columnContent);\n        updateColumnAria(ident);\n        if (isEditor || usersCanEdit == 1) {\n            updateSortable();\n        }\n    };\n\n    /**\n     * Gets the text name used in the heading of a column.\n     * @param {number} id The ID data attribute on the column element.\n     * @returns {string}\n     */\n    const getColumnName = (id) => {\n        return $(`.board_column[data-ident='${id}']`).find('.mod_board_column_name').html();\n    };\n\n    /**\n     * Add the new column button.\n     *\n     * @method addNewColumnButton\n     */\n    var addNewColumnButton = function() {\n        var column = $('<div class=\"board_column board_column_empty\"></div>'),\n            newBusy = false;\n        column.append('<div class=\"board_button newcolumn\" role=\"button\" tabindex=\"0\" aria-label=\"' +\n            strings.aria_newcolumn + '\" title=\"' + strings.aria_newcolumn + '\"><div class=\"button_content\"><span class=\"fa '\n            + options.columnicon + '\"></span></div></div>');\n\n        handleAction(column.find('.newcolumn'), function() {\n            if (newBusy) {\n                return;\n            }\n            newBusy = true;\n\n            serviceCall('add_column', {boardid: board.id, name: strings.default_column_heading}, function(result) {\n                addColumn(result.id, strings.default_column_heading, {}, selectHeadingColour());\n                lastHistoryId = result.historyid;\n                newBusy = false;\n            }, function() {\n                newBusy = false;\n            });\n        });\n\n        $(\".mod_board\").append(column);\n    };\n\n    /**\n     * This selects the next heading colour from options based on the count of the\n     * current columns. Length of decremented by one as the new column button is\n     * also denoted as a column.\n     * @returns {string} colour hex string.\n     */\n    const selectHeadingColour = () => {\n        let colCount = $('.board_column').length - 1;\n        let colourCount = options.colours.length;\n        return options.colours[colCount % colourCount];\n    };\n\n    /**\n     * Update a note with the provided information.\n     *\n     * @method updateNote\n     * @param {object} note\n     * @param {string} heading\n     * @param {object} data\n     */\n    var updateNote = function(note, heading, data) {\n        var noteHeading = getNoteHeadingForNote(note);\n        var noteText = getNoteTextForNote(note);\n        var noteBorder = getNoteBorderForNote(note);\n\n        noteText.html(data.content);\n        noteHeading.html(data.heading);\n        setAttachment(note, data.attachment);\n        updateNoteAria(data.id);\n\n        // Reset the visibility state.\n        noteHeading.show();\n        noteBorder.show();\n        noteText.show();\n        if (!noteHeading.html()) {\n            noteHeading.hide();\n            noteBorder.hide();\n        }\n        if (!noteText.html() && noteHeading.html()) {\n            noteText.hide();\n            noteBorder.hide();\n        }\n    };\n\n    /**\n     * Fetch and process the recent board history.\n     *\n     * @method processBoardHistory\n     */\n    var processBoardHistory = function() {\n        serviceCall('board_history', {id: board.id, since: lastHistoryId}, function(boardhistory) {\n            for (var index in boardhistory) {\n                var item = boardhistory[index];\n                if (item.boardid != board.id) {\n                    continue; // Hmm\n                }\n\n                var data = JSON.parse(item.content);\n                if (item.action == 'add_note') {\n                    let sortorder = sortby == 3 ? data.sortorder : data.timecreated;\n                    addNote(data.columnid, data.id, data.heading, data.content, data.attachment,\n                        {id: item.userid}, sortorder, data.rating);\n                    updateNoteAria(data.id);\n                    sortNotes($('.board_column[data-ident=' + data.columnid + '] .board_column_content'));\n                } else if (item.action == 'update_note') {\n                    let note = getNote(data.id),\n                        formModal = editModal,\n                        historyData = data;\n                    if (note) {\n                        let noteHeading = getNoteHeadingForNote(note);\n\n                        if (editingNote == data.id) {\n                            Notification.confirm(\n                                strings.note_changed_title, // Confirm.\n                                strings.note_changed_text, // Are you sure?\n                                strings.Ok,\n                                strings.Cancel,\n                                function() {\n                                    formModal.hide();\n                                    updateNote(note, noteHeading, historyData);\n                                    stopNoteEdit();\n                                }\n                            );\n                        } else {\n                            updateNote(note, noteHeading, data);\n                        }\n                    }\n                } else if (item.action == 'delete_note') {\n                    if (editingNote == data.id) {\n                        Notification.alert(strings.warning, strings.note_deleted_text);\n                        stopNoteEdit();\n                    }\n                    let note = getNote(data.id);\n                    if (sortby == SORTBY_NONE) {\n                        let columnID = note.data('column');\n                        let sortorder = note.data('sortorder');\n                        sortAfterDelete(columnID, sortorder);\n                    }\n                    note.remove();\n\n                } else if (item.action == 'add_column') {\n                    addColumn(data.id, data.name, {}, selectHeadingColour());\n                } else if (item.action == 'update_column') {\n                    $(\".board_column[data-ident='\" + data.id + \"'] .mod_board_column_name\").html(data.name);\n                    updateColumnAria(data.id);\n                } else if (item.action == 'delete_column') {\n                    var column = $(\".board_column[data-ident='\" + data.id + \"']\");\n                    if (editingNote && column.find('.board_note[data-ident=\"' + editingNote + '\"]').length) {\n                        stopNoteEdit();\n                    }\n                    column.remove();\n                } else if (item.action == 'rate_note') {\n                    var note = getNote(data.id);\n                    note.find('.mod_board_rating').html(data.rating);\n                    if (sortby == SORTBY_RATING) {\n                        sortNotes(note.closest('.board_column_content'));\n                    }\n                }\n                lastHistoryId = item.id;\n            }\n\n            updateBoard();\n        });\n    };\n\n    /**\n     * Trigger a board update.\n     *\n     * @method updateBoard\n     * @param {boolean} instant\n     */\n    var updateBoard = function(instant) {\n        if (instant) {\n            processBoardHistory();\n        } else if (options.history_refresh > 0) {\n            if (reloadTimer) {\n                stopUpdating();\n            }\n            reloadTimer = setTimeout(processBoardHistory, options.history_refresh * 1000);\n        }\n    };\n\n    /**\n     * Stop/prevent the board reload timer from firing.\n     *\n     * @method stopUpdating\n     */\n    var stopUpdating = function() {\n        clearTimeout(reloadTimer);\n        reloadTimer = null;\n    };\n\n    /**\n     * Sort a set of notes.\n     *\n     * @sortNotes\n     * @param {string} content\n     * @param {boolean} toggle\n     */\n    var sortNotes = function(content, toggle) {\n        var sortCol = $(content).parent().find('.mod_board_column_sort'),\n            direction = $(content).data('sort');\n        if (!direction) {\n            if (sortby == SORTBY_RATING) {\n                direction = 'desc';\n            } else {\n                direction = 'asc';\n            }\n        }\n        if (toggle) {\n            direction = direction == 'asc' ? 'desc' : 'asc';\n        }\n\n        if (direction == 'asc') {\n            sortCol.removeClass('fa-angle-down');\n            sortCol.addClass('fa-angle-up');\n        } else {\n            sortCol.removeClass('fa-angle-up');\n            sortCol.addClass('fa-angle-down');\n        }\n        $(content).data('sort', direction);\n\n        var desc,\n            asc;\n        if (sortby == SORTBY_DATE) {\n            desc = function(a, b) {\n                return $(b).data(\"sortorder\") - $(a).data(\"sortorder\");\n            };\n            asc = function(a, b) {\n                return $(a).data(\"sortorder\") - $(b).data(\"sortorder\");\n            };\n        } else if (sortby == SORTBY_RATING) {\n            desc = function(a, b) {\n                return $(b).find('.mod_board_rating').text() - $(a).find('.mod_board_rating').text() ||\n                $(b).data(\"sortorder\") - $(a).data(\"sortorder\");\n            };\n            asc = function(a, b) {\n                return $(a).find('.mod_board_rating').text() - $(b).find('.mod_board_rating').text() ||\n                $(a).data(\"sortorder\") - $(b).data(\"sortorder\");\n            };\n        } else if (sortby == SORTBY_NONE) {\n            let sortElements = (a, b) => {\n                return $(a).data(\"sortorder\") - $(b).data(\"sortorder\");\n            };\n            $('> .board_note', $(content)).sort(sortElements).appendTo($(content));\n            return;\n        }\n\n        $('> .board_note', $(content)).sort(direction === 'asc' ? asc : desc).appendTo($(content));\n\n    };\n\n    /**\n     * Update sorting of sortable content.\n     *\n     * @method updateSortable\n     */\n    var updateSortable = function() {\n        let fromColumnID;\n        $(\".board_column_content\").sortable({\n            connectWith: \".board_column_content\",\n            cancel: \".mod_board_nosort\",\n            start: function(_, ui) {\n                fromColumnID = $(ui.item).closest('.board_column').data('ident');\n            },\n            stop: function(_, ui) {\n                var note = $(ui.item),\n                    tocolumn = note.closest('.board_column'),\n                    elem = $(this),\n                    noteid = note.data('ident'),\n                    columnid = tocolumn.data('ident');\n                let columnElements = tocolumn.find('.board_column_content').children();\n                let sortorder = columnElements.index($(`.board_note[data-ident=${noteid}]`));\n                let payload = {\n                    id: noteid,\n                    columnid: columnid,\n                    sortorder: sortorder\n                };\n                updateSortOrders(fromColumnID, payload.columnid, payload.id, payload.sortorder);\n                serviceCall('move_note', payload, (result) => {\n                    if (result.status) {\n                        lastHistoryId = result.historyid;\n                        updateNoteAria(payload.id);\n                        sortNotes($(`.board_column[data-ident=${payload.columnid}] .board_column_content`));\n                    } else {\n                        elem.sortable('cancel');\n                    }\n                });\n            }\n        });\n    };\n\n    /**\n     * Updates the inline data attributes necessary for rendering the lists\n     * in the correct sort order. Note: the data attribute values updated by\n     * jQuery are not reflected in DOM inspection but are still set.\n     * @param {number} fromColumnID The column ID of the column to sort.\n     * @param {number} toColumnID The column ID of the column to sort.\n     * @param {number} noteID  The note ID that was moved.\n     * @param {number} newSortOrder The new position of the note sort order.\n     */\n    const updateSortOrders = (fromColumnID, toColumnID, noteID, newSortOrder) => {\n        let toColumn = $(`.board_column[data-ident=${toColumnID}] .board_column_content`);\n        let movedNote = $(`.board_note[data-ident=${noteID}]`);\n        let oldSortOrder = movedNote.data('sortorder');\n        // Check whether it is the same column and then increment or decrement notes above or below\n        // then set sortorder according to whether the sortorder has moved up or down.\n        let toChildren = toColumn.children();\n        if (fromColumnID == toColumnID) {\n            toChildren.each((_, note) => {\n                let sortOrder = $(note).data('sortorder');\n                if (oldSortOrder < newSortOrder) {\n                    if (sortOrder <= newSortOrder && sortOrder >= oldSortOrder) {\n                        $(note).data('sortorder', sortOrder - 1);\n                    }\n                } else if (oldSortOrder > newSortOrder) {\n                    if (sortOrder >= newSortOrder && sortOrder <= oldSortOrder) {\n                        $(note).data('sortorder', sortOrder + 1);\n                    }\n                }\n            });\n        } else {\n            let fromColumn = $(`.board_column[data-ident=${fromColumnID}] .board_column_content`);\n            let fromChildren = fromColumn.children();\n            toChildren.each((_, note) => {\n                let sortOrder = $(note).data('sortorder');\n                if (sortOrder >= newSortOrder) {\n                    $(note).data('sortorder', sortOrder + 1);\n                }\n            });\n            fromChildren.each((_, note) => {\n                let sortOrder = $(note).data('sortorder');\n                if (sortOrder > oldSortOrder) {\n                    $(note).data('sortorder', sortOrder - 1);\n                }\n            });\n        }\n        movedNote.data('sortorder', newSortOrder);\n    };\n\n    /**\n     * Get the body fragment for the modal form.\n     *\n     * @param {number} noteid\n     * @param {number} columnid\n     * @returns {Deferred|*}\n     */\n    var getBody = function(noteid, columnid) {\n        // Get the content of the modal.\n        var params = {noteid: noteid, columnid: columnid};\n        return Fragment.loadFragment('mod_board', 'note_form', contextid, params);\n    };\n\n    /**\n     * Setup the aria labels for the modal.\n     *\n     * @param {object} note\n     * @param {object} modal\n     */\n    var updateModalAria = function(note, modal) {\n        let columnIdentifier = note.closest('.board_column').find('.mod_board_column_name').text(),\n            addYoutube,\n            addImage,\n            addLink,\n            postButton,\n            cancelButton,\n            modalRoot = modal.getRoot();\n\n        if (note.data('ident')) {\n            // Is a note update.\n            var noteIdentifier = textIdentifierForNote(note);\n\n            postButton = strings.aria_postedit.replace('{column}', columnIdentifier).replace('{post}', noteIdentifier);\n            cancelButton = strings.aria_canceledit.replace('{column}', columnIdentifier).replace('{post}', noteIdentifier);\n            addYoutube = strings.aria_addmedia.replace('{type}', strings.option_youtube).replace('{column}',\n                columnIdentifier).replace('{post}', noteIdentifier);\n            addImage = strings.aria_addmedia.replace('{type}', strings.option_image).replace('{column}',\n                columnIdentifier).replace('{post}', noteIdentifier);\n            addLink = strings.aria_addmedia.replace('{type}', strings.option_link).replace('{column}',\n                columnIdentifier).replace('{post}', noteIdentifier);\n        } else {\n            // Note is new.\n            postButton = strings.aria_postnew.replace('{column}', columnIdentifier);\n            cancelButton = strings.aria_cancelnew.replace('{column}', columnIdentifier);\n            addYoutube = strings.aria_addmedianew.replace('{type}', strings.option_youtube).replace('{column}',\n                columnIdentifier);\n            addImage = strings.aria_addmedianew.replace('{type}', strings.option_image).replace('{column}', columnIdentifier);\n            addLink = strings.aria_addmedianew.replace('{type}', strings.option_link).replace('{column}', columnIdentifier);\n        }\n\n        if (mediaSelection == MEDIA_SELECTION_BUTTONS) {\n            modalRoot.find('.mod_board_attachment_button.youtube_button').attr('aria-label', addYoutube);\n            modalRoot.find('.mod_board_attachment_button.youtube_button').attr('title', addYoutube);\n            modalRoot.find('.mod_board_attachment_button.image_button').attr('aria-label', addImage);\n            modalRoot.find('.mod_board_attachment_button.image_button').attr('title', addImage);\n            modalRoot.find('.mod_board_attachment_button.link_button').attr('aria-label', addLink);\n            modalRoot.find('.mod_board_attachment_button.link_button').attr('title', addLink);\n        }\n\n        let button = modalRoot.find(modal.getActionSelector('save'));\n        if (button) {\n            button.attr('aria-label', postButton);\n        }\n        button = modalRoot.find(modal.getActionSelector('cancel'));\n        if (button) {\n            button.attr('aria-label', cancelButton);\n        }\n    };\n\n    /**\n     * Displays the modal form to edit a note.\n     *\n     * @param {object} note\n     */\n    var showModalForm = function(note) {\n        let noteId = 0,\n            columnId = note.data('column'),\n            column = $('.board_column[data-ident=' + columnId + ']'),\n            columnIdentifier = column.find('.mod_board_column_name').text(),\n            title;\n\n        if (note.data('ident')) {\n            noteId = note.data('ident');\n            title = strings.modal_title_edit.replace('{column}', columnIdentifier);\n        } else {\n            title = strings.modal_title_new.replace('{column}', columnIdentifier);\n        }\n\n        ModalFactory.create({\n            type: ModalFactory.types.SAVE_CANCEL,\n            title: title,\n            body: getBody(noteId, columnId),\n            large: true,\n            removeOnClose: true\n        }).then(function(modal) {\n            // Use the body promise so we know body content is loaded.\n            modal.getBodyPromise().then(function () {\n                let saveInProgress = false;\n                editModal = modal;\n                modal.setLarge();\n                modal.setSaveButtonText(strings.post_button_text);\n                modal.setButtonText('cancel', strings.cancel_button_text);\n\n                modal.getRoot().on(ModalEvents.hidden, function () {\n                    stopNoteEdit();\n                    if (!note.data('ident')) {\n                        note.remove();\n                    }\n                });\n\n                modal.getRoot().on(ModalEvents.save, function (e) {\n                    e.preventDefault();\n                    modal.getRoot().find('form').submit();\n                });\n\n                var changeEvent = document.createEvent('HTMLEvents');\n                changeEvent.initEvent('change', true, true);\n\n                modal.getRoot().on('submit', 'form', function (e) {\n                    e.preventDefault();\n\n                    // Prevent multiple form submissions from being sent.\n                    if (saveInProgress) {\n                        return;\n                    }\n                    saveInProgress = true;\n\n                    // First, make sure the native html5 validity checks are run.\n                    let valid = modal.getRoot().find('form').get(0).reportValidity();\n                    if (!valid) {\n                        return;\n                    }\n\n                    // Prompt all inputs to run their validation functions.\n                    // Normally this would happen when the form is submitted, but\n                    // since we aren't submitting the form normally we need to run client side\n                    // validation.\n                    modal.getRoot().find(':input').each(function (index, element) {\n                        element.dispatchEvent(changeEvent);\n                    });\n\n                    // Now the change events have run, see if there are any \"invalid\" form fields.\n                    var invalid = $.merge(\n                        modal.getRoot().find('[aria-invalid=\"true\"]'),\n                        modal.getRoot().find('.error'),\n                        modal.getRoot().find(':invalid')\n                    );\n\n                    // If we found invalid fields, focus on the first one and do not submit via ajax.\n                    if (invalid.length) {\n                        invalid.first().focus();\n                        return;\n                    }\n\n                    var formData = JSON.stringify(modal.getRoot().find('form').serialize());\n                    serviceCall('submit_form', {contextid: contextid, jsonformdata: formData}, function (result) {\n                        if (result.status) {\n                            if (result.action == 'insert') {\n                                // Added a new note.\n                                lastHistoryId = result.historyid;\n                                note.remove();\n                                addNote(columnId, result.note.id, result.note.heading, result.note.content,\n                                    {type: result.note.type, info: result.note.info, url: result.note.url},\n                                    {id: result.note.userid}, result.note.timecreated, result.note.rating);\n                                sortNotes($('.board_column[data-ident=' + columnId + '] .board_column_content'));\n                                updateNoteAria(result.note.id);\n                            } else {\n                                // Updated existing note.\n                                lastHistoryId = result.historyid;\n                                getNoteTextForNote(note).html(result.note.content);\n                                getNoteHeadingForNote(note).html(result.note.heading);\n                                updateNoteAria(result.note.id);\n                                setAttachment(note, {\n                                    type: result.note.type,\n                                    info: result.note.info, url: result.note.url\n                                });\n                            }\n                            stopNoteEdit();\n\n                            // Clear the form changed checker.\n                            Y.use('moodle-core-formchangechecker', function() {\n                                M.core_formchangechecker.reset_form_dirty_state();\n                            });\n\n                            modal.destroy();\n                        } else {\n                            // TODO show error.\n                        }\n                    });\n\n                });\n\n                if (mediaSelection == MEDIA_SELECTION_BUTTONS) {\n                    // First hide the select menu.\n                    modal.getRoot().find('#fitem_id_mediatype').hide();\n\n                    let mediaSelect = modal.getRoot().find('#fitem_id_mediatype select'),\n                        ytButton = modal.getRoot().find('.mod_board_attachment_button.youtube_button'),\n                        pictureButton = modal.getRoot().find('.mod_board_attachment_button.image_button'),\n                        linkButton = modal.getRoot().find('.mod_board_attachment_button.link_button'),\n                        updateMediaButtons = function() {\n                            ytButton.removeClass('selected');\n                            pictureButton.removeClass('selected');\n                            linkButton.removeClass('selected');\n                            switch (mediaSelect.val()) {\n                                case (\"1\"):\n                                    ytButton.addClass('selected');\n                                    break;\n                                case (\"2\"):\n                                    pictureButton.addClass('selected');\n                                    break;\n                                case (\"3\"):\n                                    linkButton.addClass('selected');\n                                    break;\n                            }\n                        };\n\n                    updateMediaButtons();\n                    handleAction(ytButton, function() {\n                        if (mediaSelect.val() === \"1\") {\n                            mediaSelect.val(0);\n                        } else {\n                            mediaSelect.val(1);\n                        }\n                        updateMediaButtons();\n                        mediaSelect[0].dispatchEvent(changeEvent);\n                    });\n                    handleAction(pictureButton, function() {\n                        if (mediaSelect.val() === \"2\") {\n                            mediaSelect.val(0);\n                        } else {\n                            mediaSelect.val(2);\n                        }\n                        updateMediaButtons();\n                        mediaSelect[0].dispatchEvent(changeEvent);\n                    });\n                    handleAction(linkButton, function() {\n                        if (mediaSelect.val() === \"3\") {\n                            mediaSelect.val(0);\n                        } else {\n                            mediaSelect.val(3);\n                        }\n                        updateMediaButtons();\n                        mediaSelect[0].dispatchEvent(changeEvent);\n                    });\n                } else {\n                    modal.getRoot().find('#fitem_id_mediabuttons').hide();\n                }\n\n                updateModalAria(note, modal);\n                modal.show();\n\n                return modal;\n            });\n            return modal;\n        });\n    };\n\n    /**\n     * Initialize board.\n     *\n     * @method init\n     */\n    var init = function() {\n        serviceCall('get_board', {id: board.id}, function(columns) {\n            // Init\n            if (columns) {\n                for (var index in columns) {\n                    addColumn(\n                        columns[index].id,\n                        columns[index].name,\n                        columns[index].notes || {},\n                        options.colours[index % options.colours.length]\n                    );\n                }\n            }\n\n            if (isEditor) {\n                addNewColumnButton();\n            }\n\n            lastHistoryId = board.historyid;\n\n            if (isEditor) {\n                updateSortable();\n            }\n\n            updateBoard();\n        });\n    };\n\n    // Get strings\n    var stringsInfo = [];\n    for (var string in strings) {\n        stringsInfo.push({key: string, component: 'mod_board'});\n    }\n\n    $.when(getStrings(stringsInfo)).done(function(results) {\n        var index = 0;\n        for (string in strings) {\n            strings[string] = results[index++];\n        }\n\n        init();\n    });\n}\n"],"names":["board","options","contextid","strings","default_column_heading","post_button_text","cancel_button_text","remove_note_title","remove_note_text","remove_column_title","note_changed_title","note_changed_text","note_deleted_text","rate_note_text","Ok","delete","Cancel","warning","modal_title_new","modal_title_edit","option_youtube","option_image","option_link","aria_newcolumn","aria_newpost","aria_deletecolumn","aria_deletepost","aria_addmedia","aria_addmedianew","aria_deleteattachment","aria_postedit","aria_canceledit","aria_postnew","aria_cancelnew","aria_ratepost","invalid_file_extension","invalid_file_size_min","invalid_file_size_max","invalid_youtube_url","reloadTimer","lastHistoryId","isEditor","usersCanEdit","userId","mediaSelection","mediaselection","editingNote","isReadOnlyBoard","readonly","ratingenabled","sortby","editModal","enableblanktarget","parseInt","serviceCall","method","args","callback","failcallback","stopUpdating","call","methodname","done","data","fail","error","exception","_serviceCall","apply","arguments","updateBoard","getNote","ident","getNoteTextForNote","note","find","getNoteHeadingForNote","getNoteBorderForNote","getNoteAttachmentsForNote","textIdentifierForNote","noteText","html","noteHeading","noteAttachment","attachmentDataForNote","length","replace","split","slice","join","info","updateNoteAria","noteId","columnIdentifier","closest","text","noteIdentifier","deleteNoteString","attr","updateColumnAria","columnId","column","newNoteString","deleteColumnString","each","index","stopNoteEdit","noteBorder","show","hide","remove","sortAfterDelete","columnID","sortorder","getColumn","children","filter","_","element","so","setAttachment","attachment","type","attType","val","decodeText","url","attachmentInfo","attachmentUrl","attachmentFile","prop","attachmentTypeToString","FileReader","attachmentTypeChanged","previewAttachment","filename","filecontents","encodeText","fileElem","elem","removeClass","addClass","blanktarget","videoID","match","undefined","getEmbedUrl","addNote","columnid","heading","content","owner","rating","ismynote","id","iseditable","pendingNote","notecontent","noteAriaText","attachmentPreview","append","columnContent","beginEdit","showModalForm","startNoteEdit","rateElement","handleAction","canrate","confirm","result","status","historyid","sortNotes","then","rateModal","getRoot","on","ModalEvents","hidden","rateNote","removeElement","deleteNote","handleEditableAction","lastOne","last","insertAfter","prepend","addColumn","name","notes","colour","headerStyle","nameCache","columnHeader","columnSort","columnName","columnNewContent","hideheaders","getColumnName","editable","toggleFontSize","closeOnEnter","noteicon","timecreated","userid","updateSortable","selectHeadingColour","colCount","colourCount","colours","updateNote","processBoardHistory","since","boardhistory","item","boardid","JSON","parse","action","formModal","historyData","alert","instant","history_refresh","setTimeout","clearTimeout","toggle","desc","asc","sortCol","parent","direction","a","b","sort","appendTo","fromColumnID","sortable","connectWith","cancel","start","ui","stop","tocolumn","this","noteid","payload","updateSortOrders","toColumnID","noteID","newSortOrder","toColumn","movedNote","oldSortOrder","toChildren","sortOrder","fromChildren","title","params","create","ModalFactory","types","SAVE_CANCEL","body","Fragment","loadFragment","large","removeOnClose","modal","getBodyPromise","saveInProgress","setLarge","setSaveButtonText","setButtonText","save","e","preventDefault","submit","changeEvent","document","createEvent","initEvent","get","reportValidity","dispatchEvent","invalid","$","merge","first","focus","formData","stringify","serialize","jsonformdata","Y","use","M","core_formchangechecker","reset_form_dirty_state","destroy","mediaSelect","ytButton","pictureButton","linkButton","updateMediaButtons","addYoutube","addImage","addLink","postButton","cancelButton","modalRoot","button","getActionSelector","updateModalAria","init","columns","newBusy","columnicon","stringsInfo","string","push","key","component","when","results","isAriaTriggerKey","rawText","encodedText","keyCode","callBeforeOnKeyEditing","is","Error"],"mappings":";;;;;;;uFAuJwBA,MAAOC,QAASC,eAGhCC,QAAU,CACVC,uBAAwB,GACxBC,iBAAkB,GAClBC,mBAAoB,GACpBC,kBAAmB,GACnBC,iBAAkB,GAClBC,oBAAqB,GACrBC,mBAAoB,GACpBC,kBAAmB,GACnBC,kBAAmB,GACnBC,eAAgB,GAChBC,GAAI,GACJC,OAAQ,GACRC,OAAQ,GACRC,QAAS,GACTC,gBAAiB,GACjBC,iBAAkB,GAClBC,eAAgB,GAChBC,aAAc,GACdC,YAAa,GAEbC,eAAgB,GAChBC,aAAc,GACdC,kBAAmB,GACnBC,gBAAiB,GACjBC,cAAe,GACfC,iBAAkB,GAClBC,sBAAuB,GACvBC,cAAe,GACfC,gBAAiB,GACjBC,aAAc,GACdC,eAAgB,GAChBC,cAAe,GAEfC,uBAAwB,GACxBC,sBAAuB,GACvBC,sBAAuB,GAEvBC,oBAAqB,IAUrBC,YAAc,KACdC,cAAgB,KAChBC,SAAWxC,QAAQwC,WAAY,EAC/BC,aAAezC,QAAQyC,aACvBC,OAAS1C,QAAQ0C,SAAW,EAC5BC,eAAiB3C,QAAQ4C,gBAZG,EAa5BC,YAAc,EACdC,gBAAkB9C,QAAQ+C,WAAY,EACtCC,cAAgBhD,QAAQgD,cACxBC,OAASjD,QAAQiD,QAZD,EAahBC,UAAY,KACZC,kBAA6D,IAAxCC,SAASpD,QAAQmD,mBAUtCE,YAAc,SAASC,OAAQC,KAAMC,SAAUC,cAChC,kBAAXH,QACAI,eAvLS,SAASJ,OAAQC,KAAMC,SAAUC,4BAC7CE,KAAK,CAAC,CACPC,WAAY,aAAeN,OAC3BC,KAAMA,KACNM,KAAM,SAASC,MACXN,SAASM,OAEbC,KAAM,SAASC,6BACEC,UAAUD,OACnBP,cACAA,aAAaO,WA+KrBE,CAAaZ,OAAQC,MAAM,WACvBC,SAASW,MAAM,KAAMC,WACN,kBAAXd,QAAwC,aAAVA,QAC9Be,aAAY,KAEjBZ,eASHa,QAAU,SAASC,cACZ,mBAAE,2BAA6BA,MAAQ,OAU9CC,mBAAqB,SAASC,aACvB,mBAAEA,MAAMC,KAAK,yBAUpBC,sBAAwB,SAASF,aAC1B,mBAAEA,MAAMC,KAAK,4BAUpBE,qBAAuB,SAASH,aACzB,mBAAEA,MAAMC,KAAK,2BAUpBG,0BAA4B,SAASJ,aAC9B,mBAAEA,MAAMC,KAAK,+BAUpBI,sBAAwB,SAASL,UAC7BM,SAAWP,mBAAmBC,MAAMO,OACpCC,YAAcN,sBAAsBF,MAAMO,OAC1CE,eAAiBC,sBAAsBV,aAEvCQ,YAAYG,OAAS,EACdH,YAEPF,SAASK,OAAS,EACXL,SAASM,QAAQ,eAAgB,KAAKA,QAAQ,MAAO,KAAKC,MAAM,OAAOC,MAAM,EAAG,GAAGC,KAAK,KAE/FN,eAAeO,MAAQP,eAAeO,KAAKL,OAAS,EAC7CF,eAAeO,KAEnB,MASPC,eAAiB,SAASC,YACtBlB,KAAOH,QAAQqB,QACfC,iBAAmBnB,KAAKoB,QAAQ,iBAAiBnB,KAAK,0BAA0BoB,UAEhFH,OAAQ,KACJI,eAAiBjB,sBAAsBL,MACvCuB,iBAAmB9F,QAAQuB,gBAAgB4D,QAAQ,WAAYO,kBAAkBP,QAAQ,SAAUU,gBAEvGtB,KAAKC,KAAK,gBAAgBuB,KAAK,aAAcD,kBAAkBC,KAAK,QAASD,kBAC7EvB,KAAKC,KAAK,qBAAqBuB,KAAK,aAAc/F,QAAQ+B,cAAcoD,QAAQ,WAC5EO,kBAAkBP,QAAQ,SAAUU,iBACxCtB,KAAKC,KAAK,kBAAkBM,KAAKe,kBAWrCG,iBAAmB,SAASC,cACxBC,QAAS,mBAAE,4BAA8BD,SAAW,KACpDP,iBAAmBQ,OAAO1B,KAAK,0BAA0BoB,OACzDO,cAAgBnG,QAAQqB,aAAa8D,QAAQ,WAAYO,kBACzDU,mBAAqBpG,QAAQsB,kBAAkB6D,QAAQ,WAAYO,kBACvEQ,OAAO1B,KAAK,YAAYuB,KAAK,aAAcI,eAAeJ,KAAK,QAASI,eACxED,OAAO1B,KAAK,kBAAkBuB,KAAK,aAAcK,oBAAoBL,KAAK,QAASK,oBAEnFF,OAAO1B,KAAK,eAAe6B,MAAK,SAASC,MAAO/B,MAC5CiB,gBAAe,mBAAEjB,MAAMX,KAAK,cAShC2C,aAAe,cACV5D,iBAKD4B,KAAOH,QAAQzB,gBAEf4B,KAAM,KACFQ,YAAcN,sBAAsBF,MACpCM,SAAWP,mBAAmBC,MAC9BiC,WAAa9B,qBAAqBH,MAGtCQ,YAAY0B,OACZD,WAAWC,OACX5B,SAAS4B,OACJ1B,YAAYD,SACbC,YAAY2B,OACZF,WAAWE,SAEV7B,SAASC,QAAUC,YAAYD,SAChCD,SAAS6B,OACTF,WAAWE,QAInB/D,YAAc,OAzBVyB,QAAQ,GAAGuC,UAkGbC,gBAAkB,SAACC,SAAUC,eAC3BZ,OALU,SAACW,iBACR,uDAA+BA,sCAIzBE,CAAUF,UACRX,OAAOc,WAAWC,QAAO,SAACC,EAAGC,gBACjCjE,UAAS,mBAAEiE,SAASvD,KAAK,cAAgBV,SAAS4D,cAEpDT,MAAK,SAACa,EAAGC,aACVC,IAAK,mBAAED,SAASvD,KAAK,iCACvBuD,SAASvD,KAAK,YAAawD,GAAK,OAiGtCC,cAAgB,SAAS9C,KAAM+C,gBAC3BtC,eAAiBL,0BAA0BJ,SAC3CS,eAAgB,CACXsC,WAGDA,WAAWC,MAAQ,GAFnBD,WAAa,CAACC,KAAM,SAIpBC,QAAUxC,eAAeR,KAAK,mBAClCgD,QAAQC,IAAIH,WAAWC,KAAOD,WAAWC,KAAO,KAC5CC,QAAQC,MAAQ,MAChBzC,eAAeR,KAAK,SAASiD,IAAIC,WAAWJ,WAAW/B,OACvDP,eAAeR,KAAK,QAAQiD,IAAIC,WAAWJ,WAAWK,OAjDtC,SAASpD,UAC7BS,eAAiBL,0BAA0BJ,MAC3CgD,KAAOvC,eAAeR,KAAK,mBAAmBiD,MAC9CG,eAAiB5C,eAAeR,KAAK,SACrCqD,cAAgB7C,eAAeR,KAAK,QACpCsD,eAAiB9C,eAAeR,KAAK,mBAErC+C,KAAO,KACPK,eAAeG,KAAK,cAAe/H,QAAQ,UAAYgI,uBAAuBT,MAAQ,UACtFM,cAAcE,KAAK,cAAe/H,QAAQ,UAAYgI,uBAAuBT,MAAQ,SAErFK,eAAenB,OApVE,GAqVbc,MAA4BU,YAC5BH,eAAerB,OACfoB,cAAcnB,SAEdoB,eAAepB,OACfmB,cAAcpB,UAGlBmB,eAAelB,OACfmB,cAAcnB,OACdoB,eAAepB,OAEfkB,eAAeH,IAAI,IACnBI,cAAcJ,IAAI,KA0BlBS,CAAsB3D,MAE1B4D,kBAAkB5D,KAAM+C,aAUxBrC,sBAAwB,SAASV,UAC7B+C,WAAa,CAACC,KAAM,EAAGhC,KAAM,KAAMoC,IAAK,KAAMS,SAAU,KAAMC,aAAc,MAC5ErD,eAAiBL,0BAA0BJ,SAC3CS,eAAeE,OAAQ,CACvBoC,WAAWC,KAAOvC,eAAeR,KAAK,mBAAmBiD,MACzDH,WAAW/B,KAAO+C,WAAWtD,eAAeR,KAAK,SAASiD,OAC1DH,WAAWK,IAAMW,WAAWtD,eAAeR,KAAK,QAAQiD,WACpDc,SAAWvD,eAAeR,KAAK,yBAC/B+D,SAAS3E,KAAK,cACd0D,WAAWc,SAAWG,SAAS3E,KAAK,YACpC0D,WAAWe,aAAeE,SAAS3E,KAAK,wBAG1C0D,WAAW/B,MAAS+B,WAAW/B,KAAKL,QAAaoC,WAAWK,KAAQL,WAAWK,IAAIzC,QACnFoC,WAAWc,WACbd,WAAWC,KAAO,GAGfD,YAUPU,uBAAyB,SAAST,aAC1BA,UACC,UAAY,cACZ,UAAY,YACZ,UAAY,sBACD,OA2BpBY,kBAAoB,SAAS5D,KAAM+C,gBAC/BkB,KAAOjE,KAAKC,KAAK,yBAChB8C,aACDA,WAAarC,sBAAsBV,OAGlCD,mBAAmBC,MAAMO,OAAOI,OAGjCsD,KAAKC,YAAY,oBAFjBD,KAAKE,SAAS,oBAKlBF,KAAKC,YAAY,mBACjBD,KAAKC,YAAY,iBACjBD,KAAKC,YAAY,eACbnB,WAAWc,UAndM,GAmdMlF,SAASoE,WAAWC,MAC3CiB,KAAK1D,yBAAkBwC,WAAWe,+BAAsBf,WAAW/B,gEAEnEiD,KAAKE,SAAS,iBACdF,KAAK/B,YACF,GAAIa,WAAWK,IAAK,KACjBgB,YAAc1F,kBAAoB,mBAAqB,UACrDC,SAASoE,WAAWC,YA3dX,MA6dLI,IAzCA,SAACA,SAGbiB,QAAUjB,IAAIkB,MADN,gDAEPD,cAA0BE,IAAfF,QAAQ,IAA0C,KAAtBA,QAAQ,GAAG1D,wDAGN0D,QAAQ,IAF9C,KAoCWG,CAAYzB,WAAWK,KACrB,OAARA,IACAa,KAAK1D,KAAK9E,QAAQmC,sBAElBqG,KAAK1D,KAAK,gBAAkB6C,IAAlB,iLAGVa,KAAKE,SAAS,oBAElBF,KAAK/B,kBAreI,EAyeT+B,KAAK1D,yBAAkBwC,WAAWK,sBAAaL,WAAW/B,wEAE1DiD,KAAKE,SAAS,iBACdF,KAAK/B,kBA3eG,EA8eR+B,KAAK1D,KAAK,YAAcwC,WAAWK,IAAM,sCAAwCgB,YAAc,KACrFrB,WAAW/B,MAAQ+B,WAAWK,KAAO,QAC/Ca,KAAKE,SAAS,eACdF,KAAK/B,qBAGL+B,KAAK1D,KAAK,IACV0D,KAAK9B,aAGb8B,KAAK1D,KAAK,IACV0D,KAAK9B,QAiBTsC,QAAU,SAASC,SAAU5E,MAAO6E,QAASC,QAAS7B,WAAY8B,MAAOtC,UAAWuC,YAChFC,SAAWF,MAAMG,IAAM/G,SAAW6B,MAClCmF,WAAalH,UAAagH,WAAa1G,oBAEtCyB,MAAO,KACJoF,YAAcrF,QAAQ,GACtBqF,aACAA,YAAY9C,SA9gBJ,GAmhBZ5D,SACe,uDAA+BkG,sCAAoCjC,WAC1DC,QAAO,SAACC,EAAGC,gBACxBjE,UAAS,mBAAEiE,SAASvD,KAAK,eAAiBV,SAAS4D,cAErDT,MAAK,SAACa,EAAGC,aACVC,IAAK,mBAAED,SAASvD,KAAK,iCACvBuD,SAASvD,KAAK,YAAawD,GAAK,UAItC7C,MAAO,mBAAE,wCAA0C0E,SAAW,iBAAmB5E,MACjF,qBAAuByC,UAAY,YACnCwC,UACA/E,KAAKmE,SAAS,oBAEdc,YACAjF,KAAKmE,SAAS,0BAEbY,UAAaE,YACdjF,KAAKmE,SAAS,wBAGdgB,aAAc,mBAAE,8CAChB3E,aAAc,mBAAE,qDAAuDmE,SAAoB,IAAM,UACjG1C,YAAa,mBAAE,6CACf3B,UAAW,mBAAE,kDAAoDsE,SAAoB,IAAM,UAC3FQ,cAAe,mBAAE,uFACjBC,mBAAoB,mBAAE,yCAE1BF,YAAYG,OAAO9E,aACnB2E,YAAYG,OAAOrD,YACnBkD,YAAYG,OAAOhF,UACnB6E,YAAYG,OAAOF,cAEnBD,YAAYG,OAAOD,mBACnBrF,KAAKsF,OAAOH,iBAERI,eAAgB,mBAAE,4BAA8Bb,SAAW,2BAE3Dc,UAAY,YAzXA,SAAS1F,UAErB1B,YAAa,IACTA,aAAe0B,aAGnBkC,kBAGAlC,MAAO,KACHoF,YAAcrF,QAAQ,GACtBqF,aACAA,YAAY9C,aAIhBpC,KAAOH,QAAQC,OACfE,OACAyF,cAAczF,MAEVF,QACA1B,YAAc0B,QAqWlB4F,CAAc5F,WAGdA,MAAO,IACHvB,cAAe,CACfyB,KAAKmE,SAAS,8BACVwB,aAAc,kGAA0Eb,mBAE5Fc,aAAaD,aAAa,YAjTvB,SAAS7F,UACfvB,gBAGDF,qBAIA2B,KAAOH,QAAQC,OACfgF,OAAS9E,KAAKC,KAAK,qBACnB6E,OAAOzF,KAAK,cAGhByF,OAAOzF,KAAK,YAAY,GAExBT,YAAY,gBAAiB,CAACoG,GAAIlF,QAAQ,SAAS+F,SAC3CA,+BACaC,QACTrK,QAAQU,eACR,KACAV,QAAQW,GACRX,QAAQa,QACR,WACIsC,YAAY,YAAa,CAACoG,GAAIlF,QAAQ,SAASiG,QACvCA,OAAOC,SACPlI,cAAgBiI,OAAOE,UACvBnB,OAAOvE,KAAKwF,OAAOjB,QA9SzB,GA+SUtG,QACA0H,UAAUlG,KAAKoB,QAAQ,2BAG/B0D,OAAOzF,KAAK,YAAY,SAGlC8G,MAAK,SAASC,WAEZA,UAAUC,UAAUC,GAAGC,sBAAYC,QAAQ,WACvC1B,OAAOzF,KAAK,YAAY,cA6Q5BoH,CAAS3G,UAEbqF,YAAYG,OAAOK,gBAGnBV,WAAY,KACRyB,eAAgB,mBAAE,4FACtBd,aAAac,eAAe,YA1WvB,SAAS5G,6BACTgG,QACTrK,QAAQI,kBACRJ,QAAQK,iBACRL,QAAQY,OACRZ,QAAQa,QACR,WACIsC,YAAY,cAAe,CAAEoG,GAAIlF,QAAS,SAAUiG,WAC5CA,OAAOC,OAAQ,CACflI,cAAgBiI,OAAOE,cACnBjG,KAAOH,QAAQC,UA5OnB,GA6OItB,OAAuB,KACnB8D,SAAWtC,KAAKX,KAAK,UACrBkD,UAAYvC,KAAKX,KAAK,aAC1BgD,gBAAgBC,SAAUC,WAE9BvC,KAAKoC,gBA2VTuE,CAAW7G,UAGfqF,YAAYG,OAAOoB,eAEnBE,qBAAqBtG,SAAUkF,WAC/BoB,qBAAqBpG,YAAagF,WAClCoB,qBAAqB3E,WAAYuD,WAEjC1C,cAAc9C,KAAM+C,iBAEpBa,kBAAkB5D,KAAM+C,YAGvBvC,YAAYD,SACbC,YAAY2B,OACZF,WAAWE,SAEV7B,SAASC,QAAUC,YAAYD,SAChCD,SAAS6B,OACTF,WAAWE,YAGX0E,QAAUtB,cAActF,KAAK,eAAe6G,OAE5CD,QAAQlG,OACRX,KAAK+G,YAAYF,SAEjBtB,cAAcyB,QAAQhH,8BAGxB,4BAA8B0E,SAAW,8BAA8BY,OAAOtF,MAEhFA,KAAKmC,OACLqD,aAaJyB,UAAY,SAAUnH,MAAOoH,KAAMC,MAAOC,YACtCC,qDAAgDD,YAChDnC,WAAalH,SACbuJ,UAAY,KACZ3F,QAAS,4EAAoD0F,oCAA2BvH,mBACxFyH,cAAe,mBAAE,2CACjBC,YAAa,mBAAE,gDACfC,YAAa,mBAAE,iFAAmFP,KAAO,UACzG3B,eAAgB,mBAAE,4CAClBmC,kBAAmB,mBAAE,kDAroBT,GAuoBZlJ,QACA+I,aAAajC,OAAOkC,YAExBD,aAAajC,OAAOmC,YAEhBlM,QAAQoM,aACRF,WAAWtD,SAAS,UAGxBqD,WAAWlB,GAAG,SAAS,WACnBJ,UAAUX,eAAe,MAGzBN,WAAY,CACZtD,OAAOwC,SAAS,gCAEZuC,eAAgB,mBAAE,8FACtBd,aAAac,eAAe,iCACXZ,QACTrK,QAAQM,qBACR,mBAAU,qBAAsB,YAAa6L,cAAc9H,QAC3DrE,QAAQY,OACRZ,QAAQa,QACR,WACIsC,YAAY,gBAAiB,CAACoG,GAAIlF,QAAQ,SAASiG,QAC3CA,OAAOC,SACPrE,OAAOS,SACPtE,cAAgBiI,OAAOE,oBAO3CsB,aAAajC,OAAOoB,eAGxB/E,OAAO2D,OAAOiC,cACd5F,OAAO2D,OAAOC,eACd5D,OAAO2D,OAAOoC,kBAEVzC,aACA2B,qBAAqBa,YAAY,WAC7BH,UAAYG,WAAWlH,UACxB,GAEHkH,WAAWI,SAAS,CAChBC,gBAAgB,EAChBC,cAAc,EACdhJ,SAAU,SAASM,MACXA,KAAKuF,QACLhG,YAAY,gBAAiB,CAACoG,GAAIlF,MAAOoH,KAAMO,WAAWlH,SAAS,SAASwF,QACnEA,OAAOC,QAIRlI,cAAgBiI,OAAOE,UACvBxE,iBAAiB3B,SAJjB2H,WAAWlH,KAAK+G,WAChBA,UAAY,SAKjB,WACCG,WAAWlH,KAAK+G,WAChBA,UAAY,SAGhBG,WAAWlH,KAAK+G,WAChBA,UAAY,UAMvBjJ,kBACDqJ,iBAAiBpC,OAAO,4GACyB/J,QAAQyM,SAAW,yBAEpEpC,aAAa8B,iBAAiBzH,KAAK,aAAa,WAC5CwE,QAAQ3E,MAAO,EAAG,KAAM,KAAM,KAAM,CAACkF,GAAI/G,QAAS,EAAG,WAIzD4I,SAAU,mBAAE,oCAAoCC,UAChDD,QAAQlG,OACRgB,OAAOoF,YAAYF,6BAEjB,cAAcvB,OAAO3D,QAGvBwF,UACK,IAAIpF,SAASoF,MAAO,KACjB5E,UAAsB,GAAV/D,OAAc2I,MAAMpF,OAAOQ,UAAY4E,MAAMpF,OAAOkG,YACpExD,QAAQ3E,MAAOqH,MAAMpF,OAAOiD,GAAImC,MAAMpF,OAAO4C,QAASwC,MAAMpF,OAAO6C,QAC/D,CAAC5B,KAAMmE,MAAMpF,OAAOiB,KAAMhC,KAAMmG,MAAMpF,OAAOf,KAAMoC,IAAK+D,MAAMpF,OAAOqB,KACrE,CAAC4B,GAAImC,MAAMpF,OAAOmG,QAAS3F,UAAW4E,MAAMpF,OAAO+C,QAG/DoB,UAAUX,eACV9D,iBAAiB3B,QACb/B,UAA4B,GAAhBC,eACZmK,kBASFP,cAAgB,SAAC5C,WACZ,uDAA+BA,UAAQ/E,KAAK,0BAA0BM,QAuC3E6H,oBAAsB,eACpBC,UAAW,mBAAE,iBAAiB1H,OAAS,EACvC2H,YAAc/M,QAAQgN,QAAQ5H,cAC3BpF,QAAQgN,QAAQF,SAAWC,cAWlCE,WAAa,SAASxI,KAAM2E,QAAStF,UACjCmB,YAAcN,sBAAsBF,MACpCM,SAAWP,mBAAmBC,MAC9BiC,WAAa9B,qBAAqBH,MAEtCM,SAASC,KAAKlB,KAAKuF,SACnBpE,YAAYD,KAAKlB,KAAKsF,SACtB7B,cAAc9C,KAAMX,KAAK0D,YACzB9B,eAAe5B,KAAK2F,IAGpBxE,YAAY0B,OACZD,WAAWC,OACX5B,SAAS4B,OACJ1B,YAAYD,SACbC,YAAY2B,OACZF,WAAWE,SAEV7B,SAASC,QAAUC,YAAYD,SAChCD,SAAS6B,OACTF,WAAWE,SASfsG,oBAAsB,WACtB7J,YAAY,gBAAiB,CAACoG,GAAI1J,MAAM0J,GAAI0D,MAAO5K,gBAAgB,SAAS6K,kBACnE,IAAI5G,SAAS4G,aAAc,KACxBC,KAAOD,aAAa5G,UACpB6G,KAAKC,SAAWvN,MAAM0J,QAItB3F,KAAOyJ,KAAKC,MAAMH,KAAKhE,YACR,YAAfgE,KAAKI,OAAsB,KACvBzG,UAAsB,GAAV/D,OAAca,KAAKkD,UAAYlD,KAAK4I,YACpDxD,QAAQpF,KAAKqF,SAAUrF,KAAK2F,GAAI3F,KAAKsF,QAAStF,KAAKuF,QAASvF,KAAK0D,WAC7D,CAACiC,GAAI4D,KAAKV,QAAS3F,UAAWlD,KAAKyF,QACvC7D,eAAe5B,KAAK2F,IACpBkB,WAAU,mBAAE,4BAA8B7G,KAAKqF,SAAW,iCACvD,GAAmB,eAAfkE,KAAKI,uBACRhJ,KAAOH,QAAQR,KAAK2F,IACpBiE,UAAYxK,UACZyK,YAAc7J,QACdW,KAAM,CACYE,sBAAsBF,MAEpC5B,aAAeiB,KAAK2F,yBACPc,QACTrK,QAAQO,mBACRP,QAAQQ,kBACRR,QAAQW,GACRX,QAAQa,QACR,WACI2M,UAAU9G,OACVqG,WAAWxI,KAAMQ,EAAa0I,aAC9BlH,kBAIRwG,WAAWxI,KAAMQ,EAAanB,eAGnC,GAAmB,eAAfuJ,KAAKI,OAAyB,CACjC5K,aAAeiB,KAAK2F,2BACPmE,MAAM1N,QAAQc,QAASd,QAAQS,mBAC5C8F,oBAEAhC,MAAOH,QAAQR,KAAK2F,OAh3BpB,GAi3BAxG,OAAuB,KACnB8D,SAAWtC,MAAKX,KAAK,UACrBkD,WAAYvC,MAAKX,KAAK,aAC1BgD,gBAAgBC,SAAUC,YAE9BvC,MAAKoC,cAEF,GAAmB,cAAfwG,KAAKI,OACZ/B,UAAU5H,KAAK2F,GAAI3F,KAAK6H,KAAM,GAAIkB,4BAC/B,GAAmB,iBAAfQ,KAAKI,2BACV,6BAA+B3J,KAAK2F,GAAK,6BAA6BzE,KAAKlB,KAAK6H,MAClFzF,iBAAiBpC,KAAK2F,SACnB,GAAmB,iBAAf4D,KAAKI,OAA2B,KACnCrH,QAAS,mBAAE,6BAA+BtC,KAAK2F,GAAK,MACpD5G,aAAeuD,OAAO1B,KAAK,2BAA6B7B,YAAc,MAAMuC,QAC5EqB,eAEJL,OAAOS,cACJ,GAAmB,aAAfwG,KAAKI,OAAuB,KAC/BhJ,KAAOH,QAAQR,KAAK2F,IACxBhF,KAAKC,KAAK,qBAAqBM,KAAKlB,KAAKyF,QAt4BnC,GAu4BFtG,QACA0H,UAAUlG,KAAKoB,QAAQ,0BAG/BtD,cAAgB8K,KAAK5D,IAGzBpF,kBAUJA,YAAc,SAASwJ,SACnBA,QACAX,sBACOlN,QAAQ8N,gBAAkB,IAC7BxL,aACAoB,eAEJpB,YAAcyL,WAAWb,oBAA+C,IAA1BlN,QAAQ8N,mBAS1DpK,aAAe,WACfsK,aAAa1L,aACbA,YAAc,MAUdqI,UAAY,SAAStB,QAAS4E,YAuB1BC,KACAC,IAvBAC,SAAU,mBAAE/E,SAASgF,SAAS3J,KAAK,0BACnC4J,WAAY,mBAAEjF,SAASvF,KAAK,WAC3BwK,YAEGA,UAz7BU,GAw7BVrL,OACY,OAEA,OAGhBgL,SACAK,UAAyB,OAAbA,UAAqB,OAAS,OAG7B,OAAbA,WACAF,QAAQzF,YAAY,iBACpByF,QAAQxF,SAAS,iBAEjBwF,QAAQzF,YAAY,eACpByF,QAAQxF,SAAS,sCAEnBS,SAASvF,KAAK,OAAQwK,WA18BR,GA88BZrL,OACAiL,KAAO,SAASK,EAAGC,UACR,mBAAEA,GAAG1K,KAAK,cAAe,mBAAEyK,GAAGzK,KAAK,cAE9CqK,IAAM,SAASI,EAAGC,UACP,mBAAED,GAAGzK,KAAK,cAAe,mBAAE0K,GAAG1K,KAAK,mBAE3C,GAp9BW,GAo9BPb,OACPiL,KAAO,SAASK,EAAGC,UACR,mBAAEA,GAAG9J,KAAK,qBAAqBoB,QAAS,mBAAEyI,GAAG7J,KAAK,qBAAqBoB,SAC9E,mBAAE0I,GAAG1K,KAAK,cAAe,mBAAEyK,GAAGzK,KAAK,cAEvCqK,IAAM,SAASI,EAAGC,UACP,mBAAED,GAAG7J,KAAK,qBAAqBoB,QAAS,mBAAE0I,GAAG9J,KAAK,qBAAqBoB,SAC9E,mBAAEyI,GAAGzK,KAAK,cAAe,mBAAE0K,GAAG1K,KAAK,mBAEpC,GA59BS,GA49BLb,OAAuB,gCAI5B,iBAAiB,mBAAEoG,UAAUoF,MAHZ,SAACF,EAAGC,UACZ,mBAAED,GAAGzK,KAAK,cAAe,mBAAE0K,GAAG1K,KAAK,gBAEI4K,UAAS,mBAAErF,8BAI/D,iBAAiB,mBAAEA,UAAUoF,KAAmB,QAAdH,UAAsBH,IAAMD,MAAMQ,UAAS,mBAAErF,WASjFuD,eAAiB,eACb+B,iCACF,yBAAyBC,SAAS,CAChCC,YAAa,wBACbC,OAAQ,oBACRC,MAAO,SAAS3H,EAAG4H,IACfL,cAAe,mBAAEK,GAAG3B,MAAMxH,QAAQ,iBAAiB/B,KAAK,UAE5DmL,KAAM,SAAS7H,EAAG4H,QACVvK,MAAO,mBAAEuK,GAAG3B,MACZ6B,SAAWzK,KAAKoB,QAAQ,iBACxB6C,MAAO,mBAAEyG,MACTC,OAAS3K,KAAKX,KAAK,SAInBuL,QAAU,CACV5F,GAAI2F,OACJjG,SALW+F,SAASpL,KAAK,SAMzBkD,UALiBkI,SAASxK,KAAK,yBAAyBwC,WAC7BV,OAAM,oDAA4B4I,eAMjEE,iBAAiBX,aAAcU,QAAQlG,SAAUkG,QAAQ5F,GAAI4F,QAAQrI,WACrE3D,YAAY,YAAagM,SAAS,SAAC7E,QAC3BA,OAAOC,QACPlI,cAAgBiI,OAAOE,UACvBhF,eAAe2J,QAAQ5F,IACvBkB,WAAU,sDAA8B0E,QAAQlG,uCAEhDT,KAAKkG,SAAS,iBAgB5BU,iBAAmB,SAACX,aAAcY,WAAYC,OAAQC,kBACpDC,UAAW,sDAA8BH,uCACzCI,WAAY,oDAA4BH,aACxCI,aAAeD,UAAU7L,KAAK,aAG9B+L,WAAaH,SAASxI,cACtByH,cAAgBY,WAChBM,WAAWtJ,MAAK,SAACa,EAAG3C,UACZqL,WAAY,mBAAErL,MAAMX,KAAK,aACzB8L,aAAeH,aACXK,WAAaL,cAAgBK,WAAaF,kCACxCnL,MAAMX,KAAK,YAAagM,UAAY,GAEnCF,aAAeH,cAClBK,WAAaL,cAAgBK,WAAaF,kCACxCnL,MAAMX,KAAK,YAAagM,UAAY,UAI/C,KAECC,cADa,sDAA8BpB,yCACjBzH,WAC9B2I,WAAWtJ,MAAK,SAACa,EAAG3C,UACZqL,WAAY,mBAAErL,MAAMX,KAAK,aACzBgM,WAAaL,kCACXhL,MAAMX,KAAK,YAAagM,UAAY,MAG9CC,aAAaxJ,MAAK,SAACa,EAAG3C,UACdqL,WAAY,mBAAErL,MAAMX,KAAK,aACzBgM,UAAYF,kCACVnL,MAAMX,KAAK,YAAagM,UAAY,MAIlDH,UAAU7L,KAAK,YAAa2L,eA6E5BvF,cAAgB,SAASzF,UAKrBuL,MAxEeZ,OAAQjG,SAEvB8G,OAkEAtK,OAAS,EACTQ,SAAW1B,KAAKX,KAAK,UAErB8B,kBADS,mBAAE,4BAA8BO,SAAW,KAC1BzB,KAAK,0BAA0BoB,OAGzDrB,KAAKX,KAAK,UACV6B,OAASlB,KAAKX,KAAK,SACnBkM,MAAQ9P,QAAQgB,iBAAiBmE,QAAQ,WAAYO,mBAErDoK,MAAQ9P,QAAQe,gBAAgBoE,QAAQ,WAAYO,yCAG3CsK,OAAO,CAChBzI,KAAM0I,uBAAaC,MAAMC,YACzBL,MAAOA,MACPM,MApFelB,OAoFDzJ,OApFSwD,SAoFDhD,SAlFtB8J,OAAS,CAACb,OAAQA,OAAQjG,SAAUA,UACjCoH,kBAASC,aAAa,YAAa,YAAavQ,UAAWgQ,SAkF9DQ,OAAO,EACPC,eAAe,IAChB9F,MAAK,SAAS+F,cAEbA,MAAMC,iBAAiBhG,MAAK,eACpBiG,gBAAiB,EACrB3N,UAAYyN,MACZA,MAAMG,WACNH,MAAMI,kBAAkB7Q,QAAQE,kBAChCuQ,MAAMK,cAAc,SAAU9Q,QAAQG,oBAEtCsQ,MAAM7F,UAAUC,GAAGC,sBAAYC,QAAQ,WACnCxE,eACKhC,KAAKX,KAAK,UACXW,KAAKoC,YAIb8J,MAAM7F,UAAUC,GAAGC,sBAAYiG,MAAM,SAAUC,GAC3CA,EAAEC,iBACFR,MAAM7F,UAAUpG,KAAK,QAAQ0M,gBAG7BC,YAAcC,SAASC,YAAY,iBACvCF,YAAYG,UAAU,UAAU,GAAM,GAEtCb,MAAM7F,UAAUC,GAAG,SAAU,QAAQ,SAAUmG,OAC3CA,EAAEC,kBAGEN,kBAGJA,gBAAiB,EAGLF,MAAM7F,UAAUpG,KAAK,QAAQ+M,IAAI,GAAGC,mBAShDf,MAAM7F,UAAUpG,KAAK,UAAU6B,MAAK,SAAUC,MAAOa,SACjDA,QAAQsK,cAAcN,oBAItBO,QAAUC,gBAAEC,MACZnB,MAAM7F,UAAUpG,KAAK,yBACrBiM,MAAM7F,UAAUpG,KAAK,UACrBiM,MAAM7F,UAAUpG,KAAK,gBAIrBkN,QAAQxM,OACRwM,QAAQG,QAAQC,iBAIhBC,SAAW1E,KAAK2E,UAAUvB,MAAM7F,UAAUpG,KAAK,QAAQyN,aAC3D9O,YAAY,cAAe,CAACpD,UAAWA,UAAWmS,aAAcH,WAAW,SAAUzH,QAC7EA,OAAOC,SACc,UAAjBD,OAAOiD,QAEPlL,cAAgBiI,OAAOE,UACvBjG,KAAKoC,SACLqC,QAAQ/C,SAAUqE,OAAO/F,KAAKgF,GAAIe,OAAO/F,KAAK2E,QAASoB,OAAO/F,KAAK4E,QAC/D,CAAC5B,KAAM+C,OAAO/F,KAAKgD,KAAMhC,KAAM+E,OAAO/F,KAAKgB,KAAMoC,IAAK2C,OAAO/F,KAAKoD,KAClE,CAAC4B,GAAIe,OAAO/F,KAAKkI,QAASnC,OAAO/F,KAAKiI,YAAalC,OAAO/F,KAAK8E,QACnEoB,WAAU,mBAAE,4BAA8BxE,SAAW,4BACrDT,eAAe8E,OAAO/F,KAAKgF,MAG3BlH,cAAgBiI,OAAOE,UACvBlG,mBAAmBC,MAAMO,KAAKwF,OAAO/F,KAAK4E,SAC1C1E,sBAAsBF,MAAMO,KAAKwF,OAAO/F,KAAK2E,SAC7C1D,eAAe8E,OAAO/F,KAAKgF,IAC3BlC,cAAc9C,KAAM,CAChBgD,KAAM+C,OAAO/F,KAAKgD,KAClBhC,KAAM+E,OAAO/F,KAAKgB,KAAMoC,IAAK2C,OAAO/F,KAAKoD,OAGjDpB,eAGA4L,EAAEC,IAAI,iCAAiC,WACnCC,EAAEC,uBAAuBC,4BAG7B9B,MAAM+B,mBA9vCE,GAswChB/P,eAA2C,CAE3CgO,MAAM7F,UAAUpG,KAAK,uBAAuBkC,WAExC+L,YAAchC,MAAM7F,UAAUpG,KAAK,8BACnCkO,SAAWjC,MAAM7F,UAAUpG,KAAK,+CAChCmO,cAAgBlC,MAAM7F,UAAUpG,KAAK,6CACrCoO,WAAanC,MAAM7F,UAAUpG,KAAK,4CAClCqO,mBAAqB,kBACjBH,SAASjK,YAAY,YACrBkK,cAAclK,YAAY,YAC1BmK,WAAWnK,YAAY,YACfgK,YAAYhL,WACV,IACFiL,SAAShK,SAAS,sBAEhB,IACFiK,cAAcjK,SAAS,sBAErB,IACFkK,WAAWlK,SAAS,cAKpCmK,qBACA1I,aAAauI,UAAU,WACO,MAAtBD,YAAYhL,MACZgL,YAAYhL,IAAI,GAEhBgL,YAAYhL,IAAI,GAEpBoL,qBACAJ,YAAY,GAAGhB,cAAcN,gBAEjChH,aAAawI,eAAe,WACE,MAAtBF,YAAYhL,MACZgL,YAAYhL,IAAI,GAEhBgL,YAAYhL,IAAI,GAEpBoL,qBACAJ,YAAY,GAAGhB,cAAcN,gBAEjChH,aAAayI,YAAY,WACK,MAAtBH,YAAYhL,MACZgL,YAAYhL,IAAI,GAEhBgL,YAAYhL,IAAI,GAEpBoL,qBACAJ,YAAY,GAAGhB,cAAcN,qBAGjCV,MAAM7F,UAAUpG,KAAK,0BAA0BkC,cAnOzC,SAASnC,KAAMkM,WAE7BqC,WACAC,SACAC,QACAC,WACAC,aALAxN,iBAAmBnB,KAAKoB,QAAQ,iBAAiBnB,KAAK,0BAA0BoB,OAMhFuN,UAAY1C,MAAM7F,aAElBrG,KAAKX,KAAK,SAAU,KAEhBiC,eAAiBjB,sBAAsBL,MAE3C0O,WAAajT,QAAQ2B,cAAcwD,QAAQ,WAAYO,kBAAkBP,QAAQ,SAAUU,gBAC3FqN,aAAelT,QAAQ4B,gBAAgBuD,QAAQ,WAAYO,kBAAkBP,QAAQ,SAAUU,gBAC/FiN,WAAa9S,QAAQwB,cAAc2D,QAAQ,SAAUnF,QAAQiB,gBAAgBkE,QAAQ,WACjFO,kBAAkBP,QAAQ,SAAUU,gBACxCkN,SAAW/S,QAAQwB,cAAc2D,QAAQ,SAAUnF,QAAQkB,cAAciE,QAAQ,WAC7EO,kBAAkBP,QAAQ,SAAUU,gBACxCmN,QAAUhT,QAAQwB,cAAc2D,QAAQ,SAAUnF,QAAQmB,aAAagE,QAAQ,WAC3EO,kBAAkBP,QAAQ,SAAUU,qBAGxCoN,WAAajT,QAAQ6B,aAAasD,QAAQ,WAAYO,kBACtDwN,aAAelT,QAAQ8B,eAAeqD,QAAQ,WAAYO,kBAC1DoN,WAAa9S,QAAQyB,iBAAiB0D,QAAQ,SAAUnF,QAAQiB,gBAAgBkE,QAAQ,WACpFO,kBACJqN,SAAW/S,QAAQyB,iBAAiB0D,QAAQ,SAAUnF,QAAQkB,cAAciE,QAAQ,WAAYO,kBAChGsN,QAAUhT,QAAQyB,iBAAiB0D,QAAQ,SAAUnF,QAAQmB,aAAagE,QAAQ,WAAYO,kBArnCtE,GAwnCxBjD,iBACA0Q,UAAU3O,KAAK,+CAA+CuB,KAAK,aAAc+M,YACjFK,UAAU3O,KAAK,+CAA+CuB,KAAK,QAAS+M,YAC5EK,UAAU3O,KAAK,6CAA6CuB,KAAK,aAAcgN,UAC/EI,UAAU3O,KAAK,6CAA6CuB,KAAK,QAASgN,UAC1EI,UAAU3O,KAAK,4CAA4CuB,KAAK,aAAciN,SAC9EG,UAAU3O,KAAK,4CAA4CuB,KAAK,QAASiN,cAGzEI,OAASD,UAAU3O,KAAKiM,MAAM4C,kBAAkB,SAChDD,QACAA,OAAOrN,KAAK,aAAckN,aAE9BG,OAASD,UAAU3O,KAAKiM,MAAM4C,kBAAkB,aAE5CD,OAAOrN,KAAK,aAAcmN,cAwLtBI,CAAgB/O,KAAMkM,OACtBA,MAAMhK,OAECgK,SAEJA,UASX8C,KAAO,WACPpQ,YAAY,YAAa,CAACoG,GAAI1J,MAAM0J,KAAK,SAASiK,YAE1CA,YACK,IAAIlN,SAASkN,QACdhI,UACIgI,QAAQlN,OAAOiD,GACfiK,QAAQlN,OAAOmF,KACf+H,QAAQlN,OAAOoF,OAAS,GACxB5L,QAAQgN,QAAQxG,MAAQxG,QAAQgN,QAAQ5H,SArlBnC,IACjBgB,OACAuN,QAwlBInR,WAzlBJ4D,QAAS,mBAAE,uDACXuN,SAAU,EACdvN,OAAO2D,OAAO,8EACV7J,QAAQoB,eAAiB,YAAcpB,QAAQoB,eAAiB,iDAC9DtB,QAAQ4T,WAAa,yBAE3BvJ,aAAajE,OAAO1B,KAAK,eAAe,WAChCiP,UAGJA,SAAU,EAEVtQ,YAAY,aAAc,CAACiK,QAASvN,MAAM0J,GAAIkC,KAAMzL,QAAQC,yBAAyB,SAASqK,QAC1FkB,UAAUlB,OAAOf,GAAIvJ,QAAQC,uBAAwB,GAAI0M,uBACzDtK,cAAgBiI,OAAOE,UACvBiJ,SAAU,KACX,WACCA,SAAU,6BAIhB,cAAc5J,OAAO3D,SAwkBnB7D,cAAgBxC,MAAM2K,UAElBlI,UACAoK,iBAGJvI,kBAKJwP,YAAc,OACb,IAAIC,UAAU5T,QACf2T,YAAYE,KAAK,CAACC,IAAKF,OAAQG,UAAW,8BAG5CC,MAAK,oBAAWL,cAAchQ,MAAK,SAASsQ,aACtC3N,MAAQ,MACPsN,UAAU5T,QACXA,QAAQ4T,QAAUK,QAAQ3N,SAG9BiN,qSAv/CFW,iBAAmB,SAASJ,YAChB,IAAPA,KAAoB,IAAPA,KASlBxL,WAAa,SAAS6L,gBACjB,mBAAE,WAAWvO,KAAKuO,SAASrP,QAShC4C,WAAa,SAAS0M,oBACjB,mBAAE,WAAWtP,KAAKsP,aAAaxO,QAUpCuE,aAAe,SAAS3B,KAAMlF,iBACzBkF,KAAKqC,GAAG,kBAAkB,SAASmG,MACxB,YAAVA,EAAEzJ,KAAoB,KAClB2M,iBAAiBlD,EAAEqD,gBACnBrD,EAAEC,iBAMV3N,eAYF6H,qBAAuB,SAAS3C,KAAMlF,SAAUgR,2BAC9C9L,KAAK+L,GAAG,mBACF,IAAIC,MAAM,uFAIbhM,KAAKqC,GAAG,qBAAqB,SAASmG,MAC3B,YAAVA,EAAEzJ,KAAoB,KAClB2M,iBAAiBlD,EAAEqD,UAAa7L,KAAK+L,GAAG,sBACxCvD,EAAEC,iBACEqD,wBACAhR,WAEJkF,KAAK4D,SAAS,QACVkI,8BAQZhR"}